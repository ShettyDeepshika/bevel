apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: supplychain-orderer1
  namespace: supplychain-net
  annotations:
    fluxcd.io/automated: "false"
spec:
  interval: 1m
  releaseName: supplychain-orderer1
  chart:
    spec:
      interval: 1m
      sourceRef:
        kind: GitRepository
        name: flux-local
        namespace: flux-local
      chart: platforms/hyperledger-fabric/charts/orderernode
  values:
    metadata:
      namespace: supplychain-net
      images:
        orderer: hyperledger/fabric-orderer:2.2.2
        alpineutils: index.docker.io/hyperledgerlabs/alpine-utils:1.0
    orderer:
      name: orderer1
      loglevel: info
      localmspid: supplychainMSP
      tlsstatus: true
      keepaliveserverinterval: 10s
    
    consensus:
      name: raft

    storage:
      storageclassname: supplychainsc
      storagesize: 512Mi  

    service:
      servicetype: ClusterIP
      ports:
        grpc:
          clusteripport: 7050

    vault:
      address: http://34.229.91.35:8200
      role: vault-role
      authpath: localsupplychain-net-auth
      secretprefix: secretsv2/data/crypto/ordererOrganizations/supplychain-net/orderers/orderer1.supplychain-net
      imagesecretname: regcred
      serviceaccountname: vault-auth

    proxy:
      provider: none
      external_url_suffix: supplychain-net

    genesis: |-
      CiIaIDClaqm8tpinWJUNNECPm35VNKBVsOglcM1VETOftHZoEvdbCvRbCvFbCngKWggBEAEaBgiw
      yPSkBiIKc3lzY2hhbm5lbCpAYzkzZmQ5MDBmMzVmN2VjZGZmZGFmN2UxMTZjMGVhYTQ2N2IxMzY4
      MDdmOTVkZGQzMjIxN2I3YTQ0ZjA2OGE4MRIaEhieCgh46+s4aTpRdtsluTyy5jHdpjQHhXAS9FoK
      8VoS7loSli0KC0NvbnNvcnRpdW1zEoYtErssChVTdXBwbHlDaGFpbkNvbnNvcnRpdW0SoSwS+hUK
      CGljaWNpTVNQEu0VGpEUCgNNU1ASiRQS/hMS+xMKCGljaWNpTVNQEt0FLS0tLS1CRUdJTiBDRVJU
      SUZJQ0FURS0tLS0tCk1JSUI4VENDQVphZ0F3SUJBZ0lVRWlzbkRzUjZrWWJPd2NDdFNjb0kwQndH
      cDlnd0NnWUlLb1pJemowRUF3SXcKVmpFTE1Ba0dBMVVFQmhNQ1EwZ3hEekFOQmdOVkJBZ01CbHAx
      Y21samFERVBNQTBHQTFVRUJ3d0dXblZ5YVdObwpNUTR3REFZRFZRUUtEQVZKWTJsamFURVZNQk1H
      QTFVRUF3d01ZMkV1YVdOcFkya3RibVYwTUI0WERUSXpNRFl5Ck9UQTJNVE13TTFvWERUSTJNRFF4
      T0RBMk1UTXdNMW93VmpFTE1Ba0dBMVVFQmhNQ1EwZ3hEekFOQmdOVkJBZ00KQmxwMWNtbGphREVQ
      TUEwR0ExVUVCd3dHV25WeWFXTm9NUTR3REFZRFZRUUtEQVZKWTJsamFURVZNQk1HQTFVRQpBd3dN
      WTJFdWFXTnBZMmt0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRS8wYnEw
      WFpXCmRyS1M3dDZvY1dSQklsbGczRzRqRTcvQ2RTZmJ1eVQvWUVIQmVkdDRPU1QwaWM5K1prTHd5
      U2tRb2NmbWFXN0wKWTJmakw0MTIyZ3RIYnFOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9C
      Z05WSFE4QkFmOEVCQU1DQWFZdwpIUVlEVlIwT0JCWUVGSGF2THFpSm5GL0RwMXQyVjAvVXhnc1ZE
      MWJaTUFvR0NDcUdTTTQ5QkFNQ0Ewa0FNRVlDCklRQ080aWxRUXE4bzd2SmQ2bndlNTg5NjVSbjFL
      QUNYRnA1VUNPT3RiNjdIeVFJaEFONXphemhwNjljSmdVWisKVERIT3BQclo5N0I4blo5c1hTNXNY
      T0RHMU5ISAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiKeCC0tLS0tQkVHSU4gQ0VSVElGSUNB
      VEUtLS0tLQpNSUlDM1RDQ0FvT2dBd0lCQWdJVUFPbGhqL28ySTFqOXF4cmpyYWZwMWovSHZRc3dD
      Z1lJS29aSXpqMEVBd0l3ClZqRUxNQWtHQTFVRUJoTUNRMGd4RHpBTkJnTlZCQWdNQmxwMWNtbGph
      REVQTUEwR0ExVUVCd3dHV25WeWFXTm8KTVE0d0RBWURWUVFLREFWSlkybGphVEVWTUJNR0ExVUVB
      d3dNWTJFdWFXTnBZMmt0Ym1WME1CNFhEVEl6TURZeQpPVEEyTVRrd01Gb1hEVEkwTURZeU9EQTJN
      alF3TUZvd2NURUxNQWtHQTFVRUJoTUNRMGd4R2pBWUJnTlZCQWNUCkVUUTNMak00THpndU5UUXZX
      blZ5YVdOb01RNHdEQVlEVlFRS0V3VkpZMmxqYVRFY01Bd0dBMVVFQ3hNRllXUnQKYVc0d0RBWURW
      UVFMRXdWcFkybGphVEVZTUJZR0ExVUVBd3dQUVdSdGFXNUFhV05wWTJrdGJtVjBNRmt3RXdZSApL
      b1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFZkFRU0N1d1pRa0wxWmNBUHhDVFAzb0IwOURsdFBw
      bDdvWElSCmZlQXRHMXA3VXdOYS83aExXZllyZ2crclYrTkxYMjNOOHliZnBKaWRSaForT0JkL3FL
      T0NBUkl3Z2dFT01BNEcKQTFVZER3RUIvd1FFQXdJSGdEQU1CZ05WSFJNQkFmOEVBakFBTUIwR0Ex
      VWREZ1FXQkJSRDhUM25JZnd2Q3hUYQpaL2F4ZU16eFFsdElsREFmQmdOVkhTTUVHREFXZ0JSMnJ5
      Nm9pWnhmdzZkYmRsZFAxTVlMRlE5VzJUQWpCZ05WCkhSRUVIREFhZ2hoallTMTBiMjlzY3kwNU5H
      WmpPRFUxWmpZdFpuTnRjSG93Z1lnR0NDb0RCQVVHQndnQkJIeDcKSW1GMGRISnpJanA3SW1GaVlX
      TXVhVzVwZENJNkluUnlkV1VpTENKaFpHMXBiaUk2SW5SeWRXVWlMQ0pvWmk1QgpabVpwYkdsaGRH
      bHZiaUk2SW1samFXTnBJaXdpYUdZdVJXNXliMnhzYldWdWRFbEVJam9pUVdSdGFXNUFhV05wClky
      a3RibVYwSWl3aWFHWXVWSGx3WlNJNkltRmtiV2x1SW4xOU1Bb0dDQ3FHU000OUJBTUNBMGdBTUVV
      Q0lRRFMKVHNlMFdhRys2V1FLKzFVeXVGMHExekNtRHZydmhqNEdPcWNyTWhpYjJRSWdKK1BDVy9L
      cHJPWmRiaUtOVlNpNQpmbFpRM2FkcTRjS09pd0VvZXcvZmdzMD0KLS0tLS1FTkQgQ0VSVElGSUNB
      VEUtLS0tLQpCDgoEU0hBMhIGU0hBMjU2St0FLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1J
      SUI4VENDQVphZ0F3SUJBZ0lVRWlzbkRzUjZrWWJPd2NDdFNjb0kwQndHcDlnd0NnWUlLb1pJemow
      RUF3SXcKVmpFTE1Ba0dBMVVFQmhNQ1EwZ3hEekFOQmdOVkJBZ01CbHAxY21samFERVBNQTBHQTFV
      RUJ3d0dXblZ5YVdObwpNUTR3REFZRFZRUUtEQVZKWTJsamFURVZNQk1HQTFVRUF3d01ZMkV1YVdO
      cFkya3RibVYwTUI0WERUSXpNRFl5Ck9UQTJNVE13TTFvWERUSTJNRFF4T0RBMk1UTXdNMW93VmpF
      TE1Ba0dBMVVFQmhNQ1EwZ3hEekFOQmdOVkJBZ00KQmxwMWNtbGphREVQTUEwR0ExVUVCd3dHV25W
      eWFXTm9NUTR3REFZRFZRUUtEQVZKWTJsamFURVZNQk1HQTFVRQpBd3dNWTJFdWFXTnBZMmt0Ym1W
      ME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRS8wYnEwWFpXCmRyS1M3dDZvY1dS
      QklsbGczRzRqRTcvQ2RTZmJ1eVQvWUVIQmVkdDRPU1QwaWM5K1prTHd5U2tRb2NmbWFXN0wKWTJm
      akw0MTIyZ3RIYnFOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1D
      QWFZdwpIUVlEVlIwT0JCWUVGSGF2THFpSm5GL0RwMXQyVjAvVXhnc1ZEMWJaTUFvR0NDcUdTTTQ5
      QkFNQ0Ewa0FNRVlDCklRQ080aWxRUXE4bzd2SmQ2bndlNTg5NjVSbjFLQUNYRnA1VUNPT3RiNjdI
      eVFJaEFONXphemhwNjljSmdVWisKVERIT3BQclo5N0I4blo5c1hTNXNYT0RHMU5ISAotLS0tLUVO
      RCBDRVJUSUZJQ0FURS0tLS0tChoGQWRtaW5zIjUKC0VuZG9yc2VtZW50EiYSHAgBEhgSCBIGCAES
      AggAGgwSCgoIaWNpY2lNU1AaBkFkbWlucyIxCgdSZWFkZXJzEiYSHAgBEhgSCBIGCAESAggAGgwS
      CgoIaWNpY2lNU1AaBkFkbWlucyIxCgdXcml0ZXJzEiYSHAgBEhgSCBIGCAESAggAGgwSCgoIaWNp
      Y2lNU1AaBkFkbWlucyIyCgZBZG1pbnMSKBIeCAESGhIIEgYIARICCAAaDhIMCghpY2ljaU1TUBAB
      GgZBZG1pbnMqBkFkbWlucxLGFQoGc2JpTVNQErsVGucTCgNNU1AS3xMS1BMS0RMKBnNiaU1TUBLR
      BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCNkRDQ0FZNmdBd0lCQWdJVVJKaVJ6cVoy
      ZFNzZzVSN09Tc1A5eEZ0a3hsUXdDZ1lJS29aSXpqMEVBd0l3ClVqRUxNQWtHQTFVRUJoTUNSMEl4
      RHpBTkJnTlZCQWdNQmt4dmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXUKTVF3d0NnWURWUVFL
      REFOVFlta3hFekFSQmdOVkJBTU1DbU5oTG5OaWFTMXVaWFF3SGhjTk1qTXdOakk1TURZeApOREl3
      V2hjTk1qWXdOREU0TURZeE5ESXdXakJTTVFzd0NRWURWUVFHRXdKSFFqRVBNQTBHQTFVRUNBd0dU
      Rzl1ClpHOXVNUTh3RFFZRFZRUUhEQVpNYjI1a2IyNHhEREFLQmdOVkJBb01BMU5pYVRFVE1CRUdB
      MVVFQXd3S1kyRXUKYzJKcExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFC
      QlFBUEJ0eDdvWUdLdEw4Q3JoUQpURStFUndJS2VnaFFaMFZPMHM1ekxZcjd3MmEzY0U2UUdoUTdr
      S0djZy9nNVZOVTRDcytOY25jRlI4bmNSR1AzCjFvaWpRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUJB
      Zjh3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHQTFVZERnUVcKQkJSRXNtekVNZURCNllsZkU4Y1VH
      VFZ3ZDg0ek1qQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpQnZtc2NXUkpRMQpMcTdrUHhDaWwxQkhC
      dlcybFBVclBtSXV4Sk9XYzgzMUNnSWhBSTcyeVJUSWxVd2UrRUlUNjFITXZBdjU5SWw5CkVaRyt0
      VnQ5dm44V1g2d2EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoijggtLS0tLUJFR0lOIENFUlRJ
      RklDQVRFLS0tLS0KTUlJQzBUQ0NBbmVnQXdJQkFnSVVNek5RL1JldDhwZTZVdWQ3NHEzQXE5M2Rq
      NUF3Q2dZSUtvWkl6ajBFQXdJdwpVakVMTUFrR0ExVUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHZi
      bVJ2YmpFUE1BMEdBMVVFQnd3R1RHOXVaRzl1Ck1Rd3dDZ1lEVlFRS0RBTlRZbWt4RXpBUkJnTlZC
      QU1NQ21OaExuTmlhUzF1WlhRd0hoY05Nak13TmpJNU1EWXkKTVRBd1doY05NalF3TmpJNE1EWXlO
      akF3V2pCc01Rc3dDUVlEVlFRR0V3SkhRakViTUJrR0ExVUVCeE1TTlRFdQpOVEF2TFRBdU1UTXZU
      Rzl1Wkc5dU1Rd3dDZ1lEVlFRS0V3TlRZbWt4R2pBTUJnTlZCQXNUQldGa2JXbHVNQW9HCkExVUVD
      eE1EYzJKcE1SWXdGQVlEVlFRRERBMUJaRzFwYmtCellta3RibVYwTUZrd0V3WUhLb1pJemowQ0FR
      WUkKS29aSXpqMERBUWNEUWdBRTJSSFEzSHBkdzAxN0VPV3VIZ2M4NjB0M2o1Vlp5cGRWNlh5U2sw
      SWdKbXJheEh4ZwpXN1JPcHRIQ3htbHJHZHhES0QxQ2tqSjJIa0cva2ZUeDY3a05TYU9DQVE4d2dn
      RUxNQTRHQTFVZER3RUIvd1FFCkF3SUhnREFNQmdOVkhSTUJBZjhFQWpBQU1CMEdBMVVkRGdRV0JC
      UmRHdFJmN3FNaGN0YmMvVEVGT1ZyeS9TMTAKK0RBZkJnTlZIU01FR0RBV2dCUkVzbXpFTWVEQjZZ
      bGZFOGNVR1RWd2Q4NHpNakFrQmdOVkhSRUVIVEFiZ2hsagpZUzEwYjI5c2N5MDROVFkzWW1ZNE5E
      VTRMVFJ0WW1NeU1JR0VCZ2dxQXdRRkJnY0lBUVI0ZXlKaGRIUnljeUk2CmV5SmhZbUZqTG1sdWFY
      UWlPaUowY25WbElpd2lZV1J0YVc0aU9pSjBjblZsSWl3aWFHWXVRV1ptYVd4cFlYUnAKYjI0aU9p
      SnpZbWtpTENKb1ppNUZibkp2Ykd4dFpXNTBTVVFpT2lKQlpHMXBia0J6WW1rdGJtVjBJaXdpYUdZ
      dQpWSGx3WlNJNkltRmtiV2x1SW4xOU1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lRQ3BsVHRJNlBE
      cFN6RDBzVkNECnFBbjByeWRCZFZhS3JLdW5iSWNHQ1owZ0pBSWdYVGFPdUszOEpzNUx4WWJIWGNu
      U203ajdYNWlOL21DeVd1NXoKVENmR0ZxRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpCDgoE
      U0hBMhIGU0hBMjU2StEFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2RENDQVk2Z0F3
      SUJBZ0lVUkppUnpxWjJkU3NnNVI3T1NzUDl4RnRreGxRd0NnWUlLb1pJemowRUF3SXcKVWpFTE1B
      a0dBMVVFQmhNQ1IwSXhEekFOQmdOVkJBZ01Ca3h2Ym1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1Wkc5
      dQpNUXd3Q2dZRFZRUUtEQU5UWW1reEV6QVJCZ05WQkFNTUNtTmhMbk5pYVMxdVpYUXdIaGNOTWpN
      d05qSTVNRFl4Ck5ESXdXaGNOTWpZd05ERTRNRFl4TkRJd1dqQlNNUXN3Q1FZRFZRUUdFd0pIUWpF
      UE1BMEdBMVVFQ0F3R1RHOXUKWkc5dU1ROHdEUVlEVlFRSERBWk1iMjVrYjI0eEREQUtCZ05WQkFv
      TUExTmlhVEVUTUJFR0ExVUVBd3dLWTJFdQpjMkpwTFc1bGREQlpNQk1HQnlxR1NNNDlBZ0VHQ0Nx
      R1NNNDlBd0VIQTBJQUJCUUFQQnR4N29ZR0t0TDhDcmhRClRFK0VSd0lLZWdoUVowVk8wczV6TFly
      N3cyYTNjRTZRR2hRN2tLR2NnL2c1Vk5VNENzK05jbmNGUjhuY1JHUDMKMW9palFqQkFNQThHQTFV
      ZEV3RUIvd1FGTUFNQkFmOHdEZ1lEVlIwUEFRSC9CQVFEQWdHbU1CMEdBMVVkRGdRVwpCQlJFc216
      RU1lREI2WWxmRThjVUdUVndkODR6TWpBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlCdm1zY1dSSlEx
      CkxxN2tQeENpbDFCSEJ2VzJsUFVyUG1JdXhKT1djODMxQ2dJaEFJNzJ5UlRJbFV3ZStFSVQ2MUhN
      dkF2NTlJbDkKRVpHK3RWdDl2bjhXWDZ3YQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChoGQWRt
      aW5zIjMKC0VuZG9yc2VtZW50EiQSGggBEhYSCBIGCAESAggAGgoSCAoGc2JpTVNQGgZBZG1pbnMi
      LwoHUmVhZGVycxIkEhoIARIWEggSBggBEgIIABoKEggKBnNiaU1TUBoGQWRtaW5zIi8KB1dyaXRl
      cnMSJBIaCAESFhIIEgYIARICCAAaChIICgZzYmlNU1AaBkFkbWlucyIwCgZBZG1pbnMSJhIcCAES
      GBIIEgYIARICCAAaDBIKCgZzYmlNU1AQARoGQWRtaW5zKgZBZG1pbnMaQAoVQ2hhbm5lbENyZWF0
      aW9uUG9saWN5EicSDAgDEggKBkFkbWlucxoXL0NoYW5uZWwvT3JkZXJlci9BZG1pbnMqFy9DaGFu
      bmVsL09yZGVyZXIvQWRtaW5zIi0KBkFkbWlucxIjEggIARIEEgISABoXL0NoYW5uZWwvT3JkZXJl
      ci9BZG1pbnMqFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zEpErCgdPcmRlcmVyEoUrEtIWCg5zdXBw
      bHljaGFpbk1TUBK/FhrLFAoDTVNQEsMUErgUErUUCg5zdXBwbHljaGFpbk1TUBL1BS0tLS0tQkVH
      SU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQVRDQ0FhYWdBd0lCQWdJVVZ3OVpUUUV2eFNiUXQrRjNO
      Qko4T1RDZ1oxRXdDZ1lJS29aSXpqMEVBd0l3ClhqRUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZC
      QWdNQmt4dmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXUKTVJBd0RnWURWUVFLREFkUGNtUmxj
      bVZ5TVJzd0dRWURWUVFEREJKallTNXpkWEJ3YkhsamFHRnBiaTF1WlhRdwpIaGNOTWpNd05qSTVN
      RFl4TVRRMVdoY05Nall3TkRFNE1EWXhNVFExV2pCZU1Rc3dDUVlEVlFRR0V3SkhRakVQCk1BMEdB
      MVVFQ0F3R1RHOXVaRzl1TVE4d0RRWURWUVFIREFaTWIyNWtiMjR4RURBT0JnTlZCQW9NQjA5eVpH
      VnkKWlhJeEd6QVpCZ05WQkFNTUVtTmhMbk4xY0hCc2VXTm9ZV2x1TFc1bGREQlpNQk1HQnlxR1NN
      NDlBZ0VHQ0NxRwpTTTQ5QXdFSEEwSUFCQXVaSU55ME8wc3lhS0c2ZmNSbWxJU01UUWVYZ1dyV2V5
      WlRsaWtrYXdQMTFIcXFUa0IxCk5VRlRXV3JKTUZ5aWd6MlpRMXQ2eStFTUZjSzQwM1QwTVgralFq
      QkFNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHcKRGdZRFZSMFBBUUgvQkFRREFnR21NQjBHQTFVZERn
      UVdCQlRYSkNLdURRQnB6MkFrZUhTT3V5SDdhTk1EWXpBSwpCZ2dxaGtqT1BRUURBZ05KQURCR0Fp
      RUEzUFBkNTMyNFc4MHJzK0ZyUmExU1k2em5rRWV3cDltTk1zNDR1SGtnCmpnOENJUUQ0ZGxDSFRG
      RjR6Q3NNVHh1a2FDZitwUWNZOHBpZC9uU2JPSzZLZ0dMNWpRPT0KLS0tLS1FTkQgQ0VSVElGSUNB
      VEUtLS0tLQoioggtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQzREQ0NBb2FnQXdJQkFn
      SVVkVFVneVd2SVZ1RWJRck5UVUVnN256WW80WkV3Q2dZSUtvWkl6ajBFQXdJdwpYakVMTUFrR0Ex
      VUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHZibVJ2YmpFUE1BMEdBMVVFQnd3R1RHOXVaRzl1Ck1S
      QXdEZ1lEVlFRS0RBZFBjbVJsY21WeU1Sc3dHUVlEVlFRRERCSmpZUzV6ZFhCd2JIbGphR0ZwYmkx
      dVpYUXcKSGhjTk1qTXdOakk1TURZeE56QXdXaGNOTWpRd05qSTRNRFl5TWpBd1dqQnNNUXN3Q1FZ
      RFZRUUdFd0pIUWpFYgpNQmtHQTFVRUJ4TVNOVEV1TlRBdkxUQXVNVE12VEc5dVpHOXVNUkF3RGdZ
      RFZRUUtFd2RQY21SbGNtVnlNUTR3CkRBWURWUVFMRXdWaFpHMXBiakVlTUJ3R0ExVUVBd3dWUVdS
      dGFXNUFjM1Z3Y0d4NVkyaGhhVzR0Ym1WME1Ga3cKRXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFj
      RFFnQUVEZTBuRjVidFdTb0toR0dWOTYwNVlmWCtiQVF0WHZvOAprT0V4V0NrSzZQbFdyYWJDNkNL
      Z1JCOEJtYjdVbjkxSktPL0wyWm5MaWtmQ3l3R2NsVk5oY0tPQ0FSSXdnZ0VPCk1BNEdBMVVkRHdF
      Qi93UUVBd0lIZ0RBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlRRRHdzQ1JnbVAKWHlv
      NlorZzVLaGh6eXpRSUJUQWZCZ05WSFNNRUdEQVdnQlRYSkNLdURRQnB6MkFrZUhTT3V5SDdhTk1E
      WXpBaQpCZ05WSFJFRUd6QVpnaGRqWVMxMGIyOXNjeTAxWWpSbU5qWTJZeTFqYW5oNmFqQ0JpUVlJ
      S2dNRUJRWUhDQUVFCmZYc2lZWFIwY25NaU9uc2lZV0poWXk1cGJtbDBJam9pZEhKMVpTSXNJbUZr
      YldsdUlqb2lkSEoxWlNJc0ltaG0KTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdVJXNXliMnhz
      YldWdWRFbEVJam9pUVdSdGFXNUFjM1Z3Y0d4NQpZMmhoYVc0dGJtVjBJaXdpYUdZdVZIbHdaU0k2
      SW1Ga2JXbHVJbjE5TUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDCklRQ1NxRENVQnZkamp4WXRTV2gr
      b2ZHZG56NjF4SStxSGVsUXFyTWgveUgzeUFJZ1VKNENrVVYxZXJDeUp0cXYKbmxYS1piZnpINThV
      R0NZcnE2dDFGMU5Wb2M4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCkIOCgRTSEEyEgZTSEEy
      NTZK9QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0FUQ0NBYWFnQXdJQkFnSVVWdzla
      VFFFdnhTYlF0K0YzTkJKOE9UQ2daMUV3Q2dZSUtvWkl6ajBFQXdJdwpYakVMTUFrR0ExVUVCaE1D
      UjBJeER6QU5CZ05WQkFnTUJreHZibVJ2YmpFUE1BMEdBMVVFQnd3R1RHOXVaRzl1Ck1SQXdEZ1lE
      VlFRS0RBZFBjbVJsY21WeU1Sc3dHUVlEVlFRRERCSmpZUzV6ZFhCd2JIbGphR0ZwYmkxdVpYUXcK
      SGhjTk1qTXdOakk1TURZeE1UUTFXaGNOTWpZd05ERTRNRFl4TVRRMVdqQmVNUXN3Q1FZRFZRUUdF
      d0pIUWpFUApNQTBHQTFVRUNBd0dURzl1Wkc5dU1ROHdEUVlEVlFRSERBWk1iMjVrYjI0eEVEQU9C
      Z05WQkFvTUIwOXlaR1Z5ClpYSXhHekFaQmdOVkJBTU1FbU5oTG5OMWNIQnNlV05vWVdsdUxXNWxk
      REJaTUJNR0J5cUdTTTQ5QWdFR0NDcUcKU000OUF3RUhBMElBQkF1WklOeTBPMHN5YUtHNmZjUm1s
      SVNNVFFlWGdXcldleVpUbGlra2F3UDExSHFxVGtCMQpOVUZUV1dySk1GeWlnejJaUTF0NnkrRU1G
      Y0s0MDNUME1YK2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3CkRnWURWUjBQQVFIL0JBUURB
      Z0dtTUIwR0ExVWREZ1FXQkJUWEpDS3VEUUJwejJBa2VIU091eUg3YU5NRFl6QUsKQmdncWhrak9Q
      UVFEQWdOSkFEQkdBaUVBM1BQZDUzMjRXODBycytGclJhMVNZNnpua0Vld3A5bU5NczQ0dUhrZwpq
      ZzhDSVFENGRsQ0hURkY0ekNzTVR4dWthQ2YrcFFjWThwaWQvblNiT0s2S2dHTDVqUT09Ci0tLS0t
      RU5EIENFUlRJRklDQVRFLS0tLS0KGgZBZG1pbnMiNwoHUmVhZGVycxIsEiIIARIeEggSBggBEgII
      ABoSEhAKDnN1cHBseWNoYWluTVNQGgZBZG1pbnMiNwoHV3JpdGVycxIsEiIIARIeEggSBggBEgII
      ABoSEhAKDnN1cHBseWNoYWluTVNQGgZBZG1pbnMiOAoGQWRtaW5zEi4SJAgBEiASCBIGCAESAggA
      GhQSEgoOc3VwcGx5Y2hhaW5NU1AQARoGQWRtaW5zIjsKC0VuZG9yc2VtZW50EiwSIggBEh4SCBIG
      CAESAggAGhISEAoOc3VwcGx5Y2hhaW5NU1AaBkFkbWlucyoGQWRtaW5zGiIKCUJhdGNoU2l6ZRIV
      EgsIChCAgIAxGICAQBoGQWRtaW5zGh4KDEJhdGNoVGltZW91dBIOEgQKAjJzGgZBZG1pbnMaHwoT
      Q2hhbm5lbFJlc3RyaWN0aW9ucxIIGgZBZG1pbnMaJAoMQ2FwYWJpbGl0aWVzEhQSCgoICgRWMl8w
      EgAaBkFkbWlucxqCEgoNQ29uc2Vuc3VzVHlwZRLwERLlEQoIZXRjZHJhZnQS2BEKwREKGG9yZGVy
      ZXIxLnN1cHBseWNoYWluLW5ldBCKNxrPCC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlE
      QVRDQ0FxZWdBd0lCQWdJVU8vWFpZc1QyTlZHLzA4NC9aMytwZjcyaWd0QXdDZ1lJS29aSXpqMEVB
      d0l3ClhqRUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZCQWdNQmt4dmJtUnZiakVQTUEwR0ExVUVC
      d3dHVEc5dVpHOXUKTVJBd0RnWURWUVFLREFkUGNtUmxjbVZ5TVJzd0dRWURWUVFEREJKallTNXpk
      WEJ3YkhsamFHRnBiaTF1WlhRdwpIaGNOTWpNd05qSTVNRFl4TnpBd1doY05NalF3TmpJNE1EWXlN
      akF3V2pCeE1Rc3dDUVlEVlFRR0V3SkhRakViCk1Ca0dBMVVFQnhNU05URXVOVEF2TFRBdU1UTXZU
      Rzl1Wkc5dU1SQXdEZ1lEVlFRS0V3ZFBjbVJsY21WeU1SQXcKRGdZRFZRUUxFd2R2Y21SbGNtVnlN
      U0V3SHdZRFZRUURFeGh2Y21SbGNtVnlNUzV6ZFhCd2JIbGphR0ZwYmkxdQpaWFF3V1RBVEJnY3Fo
      a2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFyZkVJc0t3YXk4N1JiRThoOVJWMFJWS2xsClFRcmNY
      akRuVGEvZEh3V0hqMlpsakM0c1E5SU1RRDNDcDU5WXJGdkt6YUFCV0hsRTIwcG5ONnVVeEU1b280
      SUIKTGpDQ0FTb3dEZ1lEVlIwUEFRSC9CQVFEQWdPb01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3
      TUJCZ2dyQmdFRgpCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlE0MnRIK3h2
      c0NiU0d1cDZGQXRNSHVhVG9OCkpEQWZCZ05WSFNNRUdEQVdnQlRYSkNLdURRQnB6MkFrZUhTT3V5
      SDdhTk1EWXpBOUJnTlZIUkVFTmpBMGdoaHYKY21SbGNtVnlNUzV6ZFhCd2JIbGphR0ZwYmkxdVpY
      U0NHRzl5WkdWeVpYSXhMbk4xY0hCc2VXTm9ZV2x1TFc1bApkREJzQmdncUF3UUZCZ2NJQVFSZ2V5
      SmhkSFJ5Y3lJNmV5Sm9aaTVCWm1acGJHbGhkR2x2YmlJNklpSXNJbWhtCkxrVnVjbTlzYkcxbGJu
      UkpSQ0k2SW05eVpHVnlaWEl4TG5OMWNIQnNlV05vWVdsdUxXNWxkQ0lzSW1obUxsUjUKY0dVaU9p
      SnZjbVJsY21WeUluMTlNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUNDMW50cUFiRVFNbUY2QUgv
      bQplczJGRklpaVFzSlpUUEZod3NGdGtCa2Znd0lnSjNHSzkzRmFyNC8yWVhLK1VCVWtIdmFrSmxD
      aUdHaXN6WE84CmhOMDA4ZjA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KIs8ILS0tLS1CRUdJ
      TiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBVENDQXFlZ0F3SUJBZ0lVTy9YWllzVDJOVkcvMDg0L1oz
      K3BmNzJpZ3RBd0NnWUlLb1pJemowRUF3SXcKWGpFTE1Ba0dBMVVFQmhNQ1IwSXhEekFOQmdOVkJB
      Z01Ca3h2Ym1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1Wkc5dQpNUkF3RGdZRFZRUUtEQWRQY21SbGNt
      VnlNUnN3R1FZRFZRUUREQkpqWVM1emRYQndiSGxqYUdGcGJpMXVaWFF3CkhoY05Nak13TmpJNU1E
      WXhOekF3V2hjTk1qUXdOakk0TURZeU1qQXdXakJ4TVFzd0NRWURWUVFHRXdKSFFqRWIKTUJrR0Ex
      VUVCeE1TTlRFdU5UQXZMVEF1TVRNdlRHOXVaRzl1TVJBd0RnWURWUVFLRXdkUGNtUmxjbVZ5TVJB
      dwpEZ1lEVlFRTEV3ZHZjbVJsY21WeU1TRXdId1lEVlFRREV4aHZjbVJsY21WeU1TNXpkWEJ3Ykhs
      amFHRnBiaTF1ClpYUXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBUXJmRUlzS3dh
      eTg3UmJFOGg5UlYwUlZLbGwKUVFyY1hqRG5UYS9kSHdXSGoyWmxqQzRzUTlJTVFEM0NwNTlZckZ2
      S3phQUJXSGxFMjBwbk42dVV4RTVvbzRJQgpMakNDQVNvd0RnWURWUjBQQVFIL0JBUURBZ09vTUIw
      R0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGCkJRY0RBakFNQmdOVkhSTUJBZjhFQWpB
      QU1CMEdBMVVkRGdRV0JCUTQydEgreHZzQ2JTR3VwNkZBdE1IdWFUb04KSkRBZkJnTlZIU01FR0RB
      V2dCVFhKQ0t1RFFCcHoyQWtlSFNPdXlIN2FOTURZekE5QmdOVkhSRUVOakEwZ2hodgpjbVJsY21W
      eU1TNXpkWEJ3YkhsamFHRnBiaTF1WlhTQ0dHOXlaR1Z5WlhJeExuTjFjSEJzZVdOb1lXbHVMVzVs
      CmREQnNCZ2dxQXdRRkJnY0lBUVJnZXlKaGRIUnljeUk2ZXlKb1ppNUJabVpwYkdsaGRHbHZiaUk2
      SWlJc0ltaG0KTGtWdWNtOXNiRzFsYm5SSlJDSTZJbTl5WkdWeVpYSXhMbk4xY0hCc2VXTm9ZV2x1
      TFc1bGRDSXNJbWhtTGxSNQpjR1VpT2lKdmNtUmxjbVZ5SW4xOU1Bb0dDQ3FHU000OUJBTUNBMGdB
      TUVVQ0lRQ0MxbnRxQWJFUU1tRjZBSC9tCmVzMkZGSWlpUXNKWlRQRmh3c0Z0a0JrZmd3SWdKM0dL
      OTNGYXI0LzJZWEsrVUJVa0h2YWtKbENpR0dpc3pYTzgKaE4wMDhmMD0KLS0tLS1FTkQgQ0VSVElG
      SUNBVEUtLS0tLQoSEgoFNTAwbXMQChgBIAUogICACBoGQWRtaW5zIiIKB1JlYWRlcnMSFxINCAMS
      CQoHUmVhZGVycxoGQWRtaW5zIiIKB1dyaXRlcnMSFxINCAMSCQoHV3JpdGVycxoGQWRtaW5zIiIK
      BkFkbWlucxIYEg4IAxIKCgZBZG1pbnMQAhoGQWRtaW5zIioKD0Jsb2NrVmFsaWRhdGlvbhIXEg0I
      AxIJCgdXcml0ZXJzGgZBZG1pbnMqBkFkbWlucxomChBIYXNoaW5nQWxnb3JpdGhtEhISCAoGU0hB
      MjU2GgZBZG1pbnMaLQoZQmxvY2tEYXRhSGFzaGluZ1N0cnVjdHVyZRIQEgYI/////w8aBkFkbWlu
      cxpOChBPcmRlcmVyQWRkcmVzc2VzEjoSHwodb3JkZXJlcjEuc3VwcGx5Y2hhaW4tbmV0OjcwNTAa
      Fy9DaGFubmVsL09yZGVyZXIvQWRtaW5zGiQKDENhcGFiaWxpdGllcxIUEgoKCAoEVjJfMBIAGgZB
      ZG1pbnMiIgoHV3JpdGVycxIXEg0IAxIJCgdXcml0ZXJzGgZBZG1pbnMiIgoGQWRtaW5zEhgSDggD
      EgoKBkFkbWlucxACGgZBZG1pbnMiIgoHUmVhZGVycxIXEg0IAxIJCgdSZWFkZXJzGgZBZG1pbnMq
      BkFkbWlucxoOCgQKAgoACgAKAAoACgA=

    config:
      pod:
        resources:
          limits:
            memory: 512M
            cpu: 1
          requests:
            memory: 512M
            cpu: 0.5
